service: real-user-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.usersTableName}

custom:
  usersTableName: real-estate-users-table-${self:provider.stage}

plugins:
  - serverless-auto-swagger
  - serverless-iam-roles-per-function

functions:
  register:
    handler: src/lambda/api.register
    name: register-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.usersTableName}
    events:
      - httpApi:
          method: POST
          path: /register
          description: "You can Register a new user whith this endpoint. you need to pass the following body: {\"userId\": \"21\", \"name\": \"John Doe\", \"DOB\": \"6/02/1960\", \"role\": \"renter\",\"location\": \"Abuja\", \"propertyId\": \"52\"}"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: "*"

  getAllUsers:
    handler: src/lambda/api.getAllUsers
    name: get-all-users
    memorySize: 128 # mb
    timeout: 5 # seconds
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.usersTableName}
    events:
      - httpApi:
          path: /users
          method: GET
          description: "You can get all registered users on the DB with this endpoint"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: "*"

  #get user by userId
  getUser:
    handler: src/lambda/api.getUserById
    name: getUser
    memorySize: 128 # mb
    timeout: 5 # seconds
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.usersTableName}
    events:
      - httpApi:
          method: GET
          path: /users/{userId}
          description: "You can get a registered user by userId with this endpoint"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"  # this is how you comment things in YAML
          - "dynamodb:Scan"
          - "dynamodb:Get*"
        Resource: "*"

  #renters function
  getRenters:
    handler: src/lambda/api.getRenters
    name: getRenters
    memorySize: 128 # mb
    timeout: 5 # seconds
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.usersTableName}
    events:
      - httpApi:
          method: GET
          path: /users/renters
          description: "You can get all registered renters on the DB with this endpoint"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"  # this is how you comment things in YAML
          - "dynamodb:Scan"
          - "dynamodb:Get*"
        Resource: "*"
  
  #buyers function
  getBuyers:
    handler: src/lambda/api.getBuyers
    name: getBuyers
    memorySize: 128 # mb
    timeout: 5 # seconds
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.usersTableName}
    events:
      - httpApi:
          method: GET
          path: /users/buyers
          description: "You can get all registered buyers on the DB with this endpoint"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"  # this is how you comment things in YAML
          - "dynamodb:Scan"
          - "dynamodb:Get*"
        Resource: "*"

  #property function
  mathcUsers:
    handler: src/lambda/api.matchUsers
    name: matchUsers
    memorySize: 128 # mb
    timeout: 5 # seconds
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.usersTableName}
    events:
      - httpApi:
          method: GET
          path: /property/{propertyId}
          description: "You can get a registered renter and buyer interested in the same property by providing the propertyId. You can test this endpoint with propertyId 2"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"  # this is how you comment things in YAML
          - "dynamodb:Scan"
          - "dynamodb:Get*"
        Resource: "*"

  #delete function
  deleteUser:
    handler: src/lambda/api.deleteUser
    name: deleteUser
    memorySize: 128 # mb
    timeout: 5 # seconds
    environment:
      DYNAMODB_TABLE_NAME: ${self:custom.usersTableName}
    events:
      - httpApi:
          method: DELETE
          path: /users/{userId}
          description: "You can delete a registered user by userId with this endpoint"
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"  
        Resource: "*"

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: role
            AttributeType: S
          - AttributeName: propertyId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
          #GSIs:
        GlobalSecondaryIndexes:
          - IndexName: role-index
            KeySchema:
              - AttributeName: role
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            #adding property index
          - IndexName: propertyId-index
            KeySchema:
              - AttributeName: propertyId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          